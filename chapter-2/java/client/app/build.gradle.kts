/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */
import com.google.protobuf.gradle.*

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("com.google.protobuf") version libs.versions.protobuf.plugin.get().toString()
    id("com.gradleup.shadow") version "8.3.6"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    implementation(libs.grpc.protobuf)
    implementation(libs.grpc.stub)
    implementation(libs.grpc.netty.shaded)
    implementation(libs.protoc.gen.plugin)
    implementation(libs.protoc.compiler)
    implementation(libs.protobuf.java)

    // Used in the generated code
    implementation(libs.javax.annotation.api)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        java {
            srcDir("build/generated/source/proto/main/grpc")
            srcDir("build/generated/source/proto/main/java")
        }
        proto {
            srcDir(project.rootDir.resolve("../../proto/proto3"))
        }
    }
}

protobuf {
    protoc {
        artifact = libs.protoc.compiler.get().toString()
    }
    plugins {
        id("grpc") {
            artifact = libs.protoc.gen.plugin.get().toString()
        }
    }
    generateProtoTasks {
        all().forEach { task ->
            task.plugins {
                id("grpc") {}
            }
        }
    }
}

application {
    // Define the main class for the application.
    mainClass = "ecommerce.ProductInfoClient"
}

// tasks.named<Jar>("jar") {
//     manifest {
//         attributes["Main-Class"] = "ecommerce.ProductInfoClient"
//     }
//     // Create Uber jar
//     from(configurations.runtimeClasspath.get().map {
//         if (it.isDirectory) it else zipTree(it)
//     }) {
//         duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//     }
// }

// tasks.named<ShadowJar>("ShadowJar") {
//     archiveBaseName.set("ecommerce-server")
//     archiveClassifier.set("")
//     manifest {
//         attributes["Main-Class"] = "ecommerce.ProductInfoServer"
//     }

//     // Configure Shadow to handle gRPC service definitions correctly
//     mergeServiceFiles()
//     exclude("META-INF/native-image/*") // Exclude GraalVM native image configurations (optional, but can prevent issues)
// }

tasks.named("jar") {
    enabled = false
}

tasks.shadowJar {
    /* 
    * Java libraries often contain service descriptors files in the META-INF/services directory of the JAR. 
    * A service descriptor typically contains a line delimited list of classes that are supported for a particular service. 
    * At runtime, this file is read and used to configure library or application behavior.
    * This specifically fixes an issue where the services for NameResolverProvider differ between packages and it chooses one of the service lists.
    */
    mergeServiceFiles()
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
